const express = require('express');
const router = express.Router();
const pool = require('../db');
const bcrypt = require('bcryptjs');
const authenticateToken = require('../middleware/authenticateToken');

// üîí –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', authenticateToken, async (req, res) => {
    try {
        const result = await pool.query('SELECT id, email, first_name, last_name FROM users WHERE id = $1', [req.user.userId]);
        res.json(result.rows[0]);
    } catch (err) {
        console.error('Error fetching profile:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// üîí –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/', authenticateToken, async (req, res) => {
    const { email, password, oldPassword, first_name, last_name } = req.body;

    try {
        let hashedPassword = null;

        if (password) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö—ç—à –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userResult = await pool.query('SELECT password FROM users WHERE id = $1', [req.user.userId]);
            const currentHashedPassword = userResult.rows[0]?.password;

            if (!currentHashedPassword) {
                return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è
            const isMatch = await bcrypt.compare(oldPassword, currentHashedPassword);
            if (!isMatch) {
                return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å' });
            }

            // –•—ç—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            hashedPassword = await bcrypt.hash(password, 10);
        }

        const result = await pool.query(
            `UPDATE users 
             SET email = COALESCE($1, email), 
                 password = COALESCE($2, password), 
                 first_name = COALESCE($3, first_name), 
                 last_name = COALESCE($4, last_name)
             WHERE id = $5 
             RETURNING id, email, first_name, last_name`,
            [email || null, hashedPassword || null, first_name || null, last_name || null, req.user.userId]
        );

        res.json(result.rows[0]);
    } catch (err) {
        console.error('Error updating profile:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});


// üîí –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—è–µ—Ç —Å–µ–±—è)
router.delete('/', authenticateToken, async (req, res) => {
    try {
        await pool.query('DELETE FROM users WHERE id = $1', [req.user.userId]);
        res.json({ message: '–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω' });
    } catch (err) {
        console.error('Error deleting profile:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

module.exports = router;


/**
 * @swagger
 * tags:
 *   name: Profile
 *   description: –ü—Ä–æ—Ñ–∏–ª—å
 */

/**
 * @swagger
 * /api/profile:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–∏ÃÜ
 *     tags: [Profile]
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–∏ÃÜ
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

/**
 * @swagger
 * /api/profile/{id}:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ ID
 *     security:
 *       - BearerAuth: []
 *     tags: [Profile]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: ID –∞–∫—Ü–∏–∏
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: –ü—Ä–æ—Ñ–∏–ª—å
 *       500:
 *         description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

/**
 * @swagger
 * /api/profile:
 *   put:
 *     summary: –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     security:
 *       - BearerAuth: []
 *     tags: [Profile]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *                 description: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
 *               oldPassword:
 *                 type: string
 *                 description: –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –µ—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å)
 *               first_name:
 *                 type: string
 *               last_name:
 *                 type: string
 *     responses:
 *       200:
 *         description: –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω
 *       400:
 *         description: –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å
 *       500:
 *         description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

/**
 * @swagger
 * /api/profile/{id}:
 *   delete:
 *     summary: –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
 *     security:
 *       - BearerAuth: []
 *     tags: [Profile]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: ID –∞–∫—Ü–∏–∏
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω–∞
 *       500:
 *         description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */